"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Smearing of X",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "Simplistic born-again", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
library("mlbench")
## Compute intercorrelation
data("Ionosphere")
p <- ncol(Ionosphere)-2
sum(cor(sapply(Ionosphere[ , -c(2L, 35L)], function(x)
if (!is.numeric(x)) as.numeric(x) else x), use = "pairwise.complete")) / (p*(p-1))
load(file = "Ionosphere MSE.Rda")
load(file = "Ionosphere acc.Rda")
load(file = "Ionosphere tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("N=5, palt=0", "N=5, palt=0.25",
"N=5, palt=0.5", "N=5, palt=1"))
MSE_long <- stack(MSE[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Smearing of X",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "Simplistic born-again", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
labs(x = "", y = "MSE") +
facet_grid(~panel, scales = "free", space = "free") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Smearing of X",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "Simplistic born-again", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
## Compute intercorrelation
data("Sonar")
p <- ncol(Sonar)-1
sum(cor(sapply(Sonar[ , -61L], function(x)
if (!is.numeric(x)) as.numeric(x) else x))) / (p*(p-1))
load(file = "Sonar MSE.Rda")
load(file = "Sonar acc.Rda")
load(file = "Sonar tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("N=5, palt=0", "N=5, palt=0.25",
"N=5, palt=0.5", "N=5, palt=1"))
MSE_long <- stack(MSE[ , -omit_inds])
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Smearing of X",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "Simplistic born-again", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Smearing of X",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "Simplistic born-again", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
MSE
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c(#"N=5, palt=0", "N=5, palt=0.25",
#"N=5, palt=0.5", "N=5, palt=1",
"N=1", "N=5", "N=10"))
MSE_long <- stack(MSE[ , -omit_inds])
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Born-again approach",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "No resampling or permutation", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Born-again approach",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "No resampling and permutation", "N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
## Compute intercorrelation
data("Sonar")
p <- ncol(Sonar)-1
sum(cor(sapply(Sonar[ , -61L], function(x)
if (!is.numeric(x)) as.numeric(x) else x))) / (p*(p-1))
load(file = "Sonar MSE.Rda")
load(file = "Sonar acc.Rda")
load(file = "Sonar tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
## Compute intercorrelation
data("Sonar")
p <- ncol(Sonar)-1
sum(cor(sapply(Sonar[ , -61L], function(x)
if (!is.numeric(x)) as.numeric(x) else x))) / (p*(p-1))
load(file = "Sonar MSE.Rda")
load(file = "Sonar acc.Rda")
load(file = "Sonar tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("N=5, palt=0", "N=5, palt=0.25",
"N=5, palt=0.5", "N=5, palt=1",
"N=1", "N=5", "N=10"))
MSE_long <- stack(MSE[ , -omit_inds])
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Born-again approach",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "No resampling or permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Born-again approach",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "No resampling and permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
## Compute intercorrelation
data("Sonar")
p <- ncol(Sonar)-1
sum(cor(sapply(Sonar[ , -61L], function(x)
if (!is.numeric(x)) as.numeric(x) else x))) / (p*(p-1))
load(file = "Sonar MSE.Rda")
load(file = "Sonar acc.Rda")
load(file = "Sonar tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("N=5, palt=0", "N=5, palt=0.25",
"N=5, palt=0.5", "N=5, palt=1",
"N=1", "N=5", "N=10"))
MSE_long <- stack(MSE[ , -omit_inds])
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Born-again approach",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "No resampling or permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Born-again approach",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "No resampling and permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, p_alt=0", "N_gen=10, p_alt=0",
"N_gen=1, p_alt=0.25",  "N_gen=10, p_alt=0.25",
"N_gen=1, p_alt=0.5", "N_gen=10, p_alt=0.5",
"N_gen=1, p_alt=1", "N_gen=10, p_alt=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
## Compute intercorrelation
data("Sonar")
p <- ncol(Sonar)-1
sum(cor(sapply(Sonar[ , -61L], function(x)
if (!is.numeric(x)) as.numeric(x) else x))) / (p*(p-1))
load(file = "Sonar MSE.Rda")
load(file = "Sonar acc.Rda")
load(file = "Sonar tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("N=5, palt=0", "N=5, palt=0.25",
"N=5, palt=0.5", "N=5, palt=1",
"N=1", "N=5", "N=10"))
MSE_long <- stack(MSE[ , -omit_inds])
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Born-again approach",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "No resampling or permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, perm=0", "N_gen=10, perm=0",
"N_gen=1, perm=0.25",  "N_gen=10, perm=0.25",
"N_gen=1, perm=0.5", "N_gen=10, perm=0.5",
"N_gen=1, perm=1", "N_gen=10, perm=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
size_long <- stack(tree_size[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Born-again approach",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "No resampling and permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, perm=0", "N_gen=10, perm=0",
"N_gen=1, perm=0.25",  "N_gen=10, perm=0.25",
"N_gen=1, perm=0.5", "N_gen=10, perm=0.5",
"N_gen=1, perm=1", "N_gen=10, perm=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
#facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
#facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank())
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
#facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=9))
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
#facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=9))
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("BaSmear_N=5_palt=0", "BaSmear_N=5_palt=0.25",
"BaSmear_N=5_palt=0.5", "BaSmear_N=5_palt=1"))
MSE_long <- stack(MSE[ , -omit_inds])
## Compute intercorrelation
data("Sonar")
p <- ncol(Sonar)-1
sum(cor(sapply(Sonar[ , -61L], function(x)
if (!is.numeric(x)) as.numeric(x) else x))) / (p*(p-1))
load(file = "Sonar MSE.Rda")
load(file = "Sonar acc.Rda")
load(file = "Sonar tree_size.Rda")
colMeans(MSE)
which.min(colMeans(MSE[ , -2]))
which.min(colMeans(acc[ , -2]))
sapply(MSE, sd)
colMeans(tree_size, na.rm=TRUE)
sapply(tree_size, sd)
theme_set(theme_gray(base_size = 8))
## Create long data and plot
omit_inds <- which(names(MSE) %in% c("N=5, palt=0", "N=5, palt=0.25",
"N=5, palt=0.5", "N=5, palt=1",
"N=1", "N=5", "N=10"))
MSE_long <- stack(MSE[ , -omit_inds])
names(MSE_long) <- c("MSE", "method")
MSE_long$panel <- ifelse(grepl("palt", MSE_long$method), "Born-again approach",
ifelse(grepl("N=", MSE_long$method), "Posterior sampling of y", "Basic approaches"))
levs <- c("tree", "BART", "No resampling or permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, perm=0", "N_gen=10, perm=0",
"N_gen=1, perm=0.25",  "N_gen=10, perm=0.25",
"N_gen=1, perm=0.5", "N_gen=10, perm=0.5",
"N_gen=1, perm=1", "N_gen=10, perm=1")
levels(MSE_long$method) <- levs
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=9))
size_long <- stack(tree_size[ , -omit_inds])
## Create identifier for: original, BA with N, Bayesian BA, Breiman BA
names(size_long) <- c("size", "method")
size_long$panel <- ifelse(grepl("palt", size_long$method), "Born-again approach",
ifelse(grepl("N=", size_long$method), "Posterior sampling of y", "Basic approaches"))
levels(size_long$method) <- c("tree", "BART", "No resampling and permutation", #"N_gen=1", "N_gen=5", "N_gen=10",
"N_gen=1, perm=0", "N_gen=10, perm=0",
"N_gen=1, perm=0.25",  "N_gen=10, perm=0.25",
"N_gen=1, perm=0.5", "N_gen=10, perm=0.5",
"N_gen=1, perm=1", "N_gen=10, perm=1")
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=9))
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=8))
ggplot(MSE_long) +
geom_boxplot(aes(x=method, y=MSE, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "MSE") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=8))
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=8))
ggplot(size_long) +
geom_boxplot(aes(x=panel, y=size, fill = method),
position=position_dodge(1), alpha = .5, width = .6) +
facet_grid(~panel, scales = "free", space = "free") +
labs(x = "", y = "# of splits") +
theme(axis.title.x=element_blank(), axis.text.x=element_blank(),
legend.text=element_text(size=8))
library("knitr")
knitr::opts_chunk$set(dpi=300)
load("PRE_items.Rda")
summary(pr_i)
pr_i$glmnet.fit$lambda
pr_i$glmnet.fit$lambda.1se
pr_i$glmnet.fit$lambda.1se <pr_i$glmnet.fit$lambda.1se
pr_i$glmnet.fit$lambda <pr_i$glmnet.fit$lambda.1se
?glmnet.fit
?cv.glmnet
pr_i$glmnet.fit$lambda => pr_i$glmnet.fit$lambda.1se
pr_i$glmnet.fit$lambda >= pr_i$glmnet.fit$lambda.1se
## Fit relaxed
pr_form <- formula(paste("major ~", paste(varnames_i, collapse = "+")))
varnames_i <- paste0(rep(c("R", "I", "A", "S", "E", "C"), each = 8), 1:8)
## Fit relaxed
pr_form <- formula(paste("major ~", paste(varnames_i, collapse = "+")))
#set.seed(42)
#pr_i_rel <- pre(pr_form, data = data[train_ids , ], learnrate = .05,
#                verbose = TRUE, family = "binomial", relax = TRUE)
library("glmnet")
set.seed(42)
rel_fit <- cv.glmnet(x = pr_i$modmat, y = pr_i$data[ , pr_i$y_names],
relax = TRUE, family = "binomial", trace.it = 1L,
lambda = pr_i$glmnet.fit$lambda >= pr_i$glmnet.fit$lambda.1se)
setwd("C:/Users/fokkemam/Desktop/github repos/ML paper EJPA/Paper/Relaxed lasso")
save(rel_fit, file = "rel_fit.Rda")
pr_i$gkmnet.fit <- rel_fit
pr_i$gkmnet.fit <- NULL
pr_i$glmnet.fit <- rel_fit
pr_i
plot(rel_fit)
set.seed(42)
rel_fit <- cv.glmnet(x = pr_i$modmat, y = pr_i$data[ , pr_i$y_names],
relax = TRUE, family = "binomial", trace.it = 1L,
lambda = pr_i$glmnet.fit$lambda[pr_i$glmnet.fit$lambda >= pr_i$glmnet.fit$lambda.1se])
save(rel_fit, file = "rel_fit.Rda")
plot(rel_fit)
pr_i$glmnet.fit$lambda[pr_i$glmnet.fit$lambda >= pr_i$glmnet.fit$lambda.1se]
pr_i$glmnet.fit$lambda
load("PRE_items.Rda")
pr_preds_train_i <- predict(pr_i, type = "response")
pr_preds_test_i <- predict(pr_i, newdata = data[test_ids , ], type = "response")
## Fit relaxed
pr_form <- formula(paste("major ~", paste(varnames_i, collapse = "+")))
#set.seed(42)
#pr_i_rel <- pre(pr_form, data = data[train_ids , ], learnrate = .05,
#                verbose = TRUE, family = "binomial", relax = TRUE)
library("glmnet")
set.seed(42)
rel_fit <- cv.glmnet(x = pr_i$modmat, y = pr_i$data[ , pr_i$y_names],
relax = TRUE, family = "binomial", trace.it = 1L,
lambda = pr_i$glmnet.fit$lambda[pr_i$glmnet.fit$lambda >= pr_i$glmnet.fit$lambda.1se])
save(rel_fit, file = "rel_fit.Rda")
pr_i$glmnet.fit <- rel_fit
pr_i
plot(rel_fit)
